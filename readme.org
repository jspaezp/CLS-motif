
* README
** Description of the project


** Example workflow

#+BEGIN_SRC  python :session :result output
# Loading internal modules
from reg_phos_reader import get_kinase_group, get_substrates
from calculate_alignment_scores import calculate_alignment_scores, cross_score
from get_windows import get_windows
from fasta_tools import get_relevant_db

# External dependencies 
from Bio import SeqIO
from Bio.Alphabet import IUPAC
from Bio import motifs

import numpy as num
import matplotlib.pyplot as plt
import pandas as pd

from ggplot import *
#+END_SRC

#+RESULTS:
: <ggplot: (-9223363245802598631)>

#+BEGIN_SRC  python :session :result output
my_kinases = get_kinase_group("./regPhos/RegPhos_kinase_human.txt",
                              "CMGC")
#+END_SRC

#+BEGIN_SRC  python :session :result output
my_substrates = get_substrates("./regPhos/RegPhos_Phos_human.txt",
                               my_kinases)
#+END_SRC

#+BEGIN_SRC  python :session :result output
fasta_db = SeqIO.parse("./ModelOrganisms/UP000005640_9606.fasta",
                       "fasta",
                       IUPAC.extended_protein)
#+END_SRC


#+BEGIN_SRC  python :session :result output
my_windows = []

for i in (my_substrates['substrates'].tolist()):
    fasta_db = SeqIO.parse("./ModelOrganisms/UP000005640_9606.fasta",
                           "fasta", IUPAC.extended_protein)
    relevant_db = get_relevant_db(fasta_db, i['AC'])
    my_windows.append(
        get_windows(
            relevant_db,
            i['AC'],
            i['position']))
#+END_SRC

#+BEGIN_SRC  python :session :result output
my_motifs = [[] if len(window['window']) == 0 else
             motifs.create(window['window']) for
             window in my_windows]
#+END_SRC


#+BEGIN_SRC  python :session :result output
# PWM is acronym for position weight matrices
my_pwm = [[] if (len(m) == 0) else m.counts.normalize(pseudocounts=1) for
          m in my_motifs]
#+END_SRC


#+BEGIN_SRC  python :session :result output
# pssm is acronym for position specific scoring matrices
my_pssm = [[] if (len(pwm) == 0) else pwm.log_odds() for
           pwm in my_pwm]
#+END_SRC

#+BEGIN_SRC  python :session :result output
# Scoring all elements of a given list
score_list = cross_score(my_pssm, 
                         "./ModelOrganisms/UP000000625_83333.fasta",
                         start=1, end=100)

# score_list = cross_score(my_pssm, "./ModelOrganisms/UP000000625_83333.fasta")
#+END_SRC


#+BEGIN_SRC  python :session :result output
# convert to nested data frames

my_data_frame = pd.DataFrame()
my_data_frame['kinase'] = [None if isinstance(i, list) else
                           str(i) for i in  my_kinases]
my_data_frame['matches'] = [None if isinstance(i, list) else
                           i for i in score_list]

#+END_SRC


#+BEGIN_SRC  python :session :result output
## Merge to a single DataFrame and plot

concat = pd.concat(my_data_frame['matches'].tolist(),
                   keys = my_data_frame['kinase'])
concat.reset_index(level=0, inplace=True)
concat = concat[concat['scores'].notnull()]

ggplot(concat, aes(x = 'scores', color = 'kinase')) + geom_density()
#plot my_scores histogram to pick out cutoff
scores_hist=plt.hist(my_scores)
#+END_SRC


